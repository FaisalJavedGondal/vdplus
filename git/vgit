#!/usr/bin/env python3

import os.path
import sys
import subprocess
from visidata import Sheet, Column, ColumnAttr, run, status, Command, Path, ENTER, asyncthread
from visidata import option, loadConfigFile, options
from visidata import domotd, TextSheet

import vgit

__version__ = 'v0.4-dev'
__version_info__ = 'saul.pw/vgit ' + __version__


option('config', '~/.vgitrc', 'config file to exec in Python')
options.motd_url = 'https://visidata.org/vgit/motd-' + __version__
option('vgit_pager', False, 'fallback to pager instead of passthrough')

def git_log(args, topsheet):
    return vgit.GitLogSheet(topsheet.branch+"_log", ref=topsheet.branch, source=topsheet)

def git_status(args, topsheet):
    return vgit.GitStatus(topsheet.source)

def git_blame(args, topsheet):
    return vgit.GitBlame(GitFile(args[0]), source=topsheet)

def git_grep(args, topsheet):
    return vgit.GitGrep(args[0], regex=args[0], source=topsheet)

def somegit(args=None):
    cwd = Path('.')

    if cwd.joinpath('.git').exists() or vgit.getRepoPath(cwd):
        top = vgit.GitStatus(cwd)
    else:
        top = vgit.GitOverview('gitrepos', source=cwd)

    if not args:
        return top

    cmd = args[0]

    funcname = 'git_'+args[0]
    func = getattr(vgit, funcname, None)
    if func:
        print(func)
        return func(args[1:], top)
    else:
        print(f"no {funcname}")


def main():
    loadConfigFile(options.config)

    args = sys.argv[1:]

    vs = somegit(args)
    print(vs)

    if vs is None:
        if options.vgit_pager:
            cmdstr = ' '.join(args)
            vs = TextSheet(cmdstr, source=somegit().git_lines(*args))
        else:
            return subprocess.run(['git', *args]).returncode

    domotd()
    run(vs)


vgit.addGlobals(globals())

if __name__ == '__main__':
    status(__version_info__)
    rc = main()
    sys.exit(rc)
