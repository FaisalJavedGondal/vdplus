#!/usr/bin/env python3

__version__ = '0.2-dev'

from visidata import *
import visidata.main

import psutil


class CPUStatsSheet(Sheet):
    rowtype='CPUs'  # rowdef = (count, perfect, times, freq) from psutil (see below)
    def reload(self):
        self.columns = []
        for c in [
                ColumnItem('cpu', 0, type=int, keycol=0),
                ColumnItem('cpu_pct', 1, type=float)
            ]:
            self.addColumn(c)

        for i, k in enumerate(psutil.cpu_times()._fields):
            self.addColumn(SubrowColumn(ColumnItem(k+'_s', i, type=float), 2))

        for i, k in enumerate(psutil.cpu_freq()._fields):
            self.addColumn(SubrowColumn(ColumnItem(k+'_MHz', i, type=float), 3))

        self.rows = list()
        for r in zip(range(psutil.cpu_count()),
                        psutil.cpu_percent(percpu=True),
                        psutil.cpu_times(percpu=True),
                        psutil.cpu_freq(percpu=True)):
            self.addRow(r)



class MemStatsSheet(Sheet):
    rowtype = ''  # rowdef: (name, value)
    columns = [
            ColumnItem('name', 0),
            ColumnItem('value', 1)
    ]

    def reload(self):
        self.rows = []
        virtmem = psutil.virtual_memory()
        swapmem = psutil.swap_memory()
        for fieldname, vmem in zip([(x+'_bytes') for x in virtmem._fields], virtmem):
            self.addRow((fieldname, vmem))

        for fieldname, vmem in zip([(x+'swap_bytes') for x in swapmem._fields], swapmem):
            self.addRow((fieldname, vmem))


class UsefulProcessesSheet(Sheet):
    columns = [
        Column('pid', type=int, getter=lambda c,r: r[0].pid),
        Column('name', getter=lambda c,r: r[0].name()),
        Column('status', getter=lambda c,r: r[0].status()),
        Column('cmdline', getter=lambda c,r: ' '.join(r[0].cmdline())),
        Column('user', getter=lambda c,r: r[0].username()),
        Column('real_uid', type=int, width=0, getter=lambda c,r: r[0].uids()[0]),
        Column('effective_uid', type=int, width=0, getter=lambda c,r: r[0].uids()[1]),
        Column('mem_uss', type=int, getter=lambda c,r: r[1].mem_uss),
        Column('user_time_s', type=float, getter=lambda c,r: r[0].cpu_times()[0]),
        Column('system_time_s', type=float, getter=lambda c,r: r[0].cpu_times()[1]),
    ]
    def reload(self):
        self.rows = []
        for pr in psutil.process_iter():
            self.addRow((pr, pr.memory_full_info()))


class ProcessesSheet(Sheet):
    columns = [
                Column('pid', type=int, getter=lambda c,r: r.pid),
                Column('name', getter=lambda c,r: r.name()),
                Column('status', getter=lambda c,r: r.status()),
                Column('parent_pid', type=int, getter=lambda c,r: r.ppid()),
                Column('exe', getter=lambda c,r: r.exe()),
                Column('cmdline', getter=lambda c,r: ' '.join(r.cmdline())),
                Column('cwd', getter=lambda c,r: r.cwd()),
                Column('user', getter=lambda c,r: r.username()),

                Column('real_uid', type=int, width=0, getter=lambda c,r: r.uids()[0]),
                Column('effective_uid', type=int, width=0, getter=lambda c,r: r.uids()[1]),
                Column('saved_uid', type=int, width=0, getter=lambda c,r: r.uids()[2]),

                Column('real_gid', type=int, width=0, getter=lambda c,r: r.gids()[0]),
                Column('effective_gid', type=int, width=0, getter=lambda c,r: r.gids()[1]),
                Column('saved_gid', type=int, width=0, getter=lambda c,r: r.gids()[2]),

                Column('create_time', type=date, getter=lambda c,r: r.create_time()),
                Column('cpu_num', type=int, getter=lambda c,r: r.cpu_num()),
                Column('cpu_percent', type=float, getter=lambda c,r: r.cpu_percent()),

                Column('tty', getter=lambda c,r: r.terminal()),
                Column('nice', getter=lambda c,r: r.nice()),
                Column('ioclass', getter=lambda c,r: r.ionice()[0]),
                Column('ionice', getter=lambda c,r: r.ionice()[1]),

                Column('user_time_s', type=float, getter=lambda c,r: r.cpu_times()[0]),
                Column('system_time_s', type=float, getter=lambda c,r: r.cpu_times()[1]),
                Column('children_user_time_s', type=float, width=0, getter=lambda c,r: r.cpu_times()[2]),
                Column('children_system_time_s', type=float, width=0, getter=lambda c,r: r.cpu_times()[3]),

                Column('read_ops', type=int, getter=lambda c,r: r.io_counters()[0]),
                Column('write_ops', type=int, getter=lambda c,r: r.io_counters()[1]),
                Column('read_bytes', type=int, getter=lambda c,r: r.io_counters()[2]),
                Column('write_bytes', type=int, getter=lambda c,r: r.io_counters()[3]),

                Column('voluntary_ctx_switches', type=int, getter=lambda c,r: r.num_ctx_switches()[0]),
                Column('involuntary_ctx_switches', type=int, getter=lambda c,r: r.num_ctx_switches()[1]),
                Column('num_fds', type=int, getter=lambda c,r: r.num_fds()),
                Column('num_threads', type=int, getter=lambda c,r: r.num_threads()),
        ]
    nKeys = 2

    def reload(self):
        self.columns = []
        for c in ProcessesSheet.columns:
            self.addColumn(c)

        for i,k in enumerate(psutil.Process().memory_full_info()._fields):
            self.addColumn(Column('mem_'+k, type=int, getter=lambda c,r,i=i: r.memory_full_info()[i], cache=True))
        # mem_uss is probably the most representative metric for determining how much memory is actually being used by a process. It represents the amount of memory that would be freed if the process was terminated right now.

        self.rows = []
        for pr in psutil.process_iter():
            self.addRow(pr)
#            try:
#                self.addRow((pr, pr.memory_full_info()))
#            except:
#                self.addRow((pr, None))

class RlimitsSheet(Sheet):
    columns = [
        ColumnItem('rlimit', 0),
        Column('soft', type=int, getter=lambda c,r: c.sheet.soft(r), setter=lambda c,r,v: c.sheet.set_soft(r, v)),
        Column('hard', type=int, getter=lambda c,r: c.sheet.hard(r), setter=lambda c,r,v: c.sheet.set_hard(r, v))
    ]

    def soft(self, r):
        return self.source.rlimit(r[1])[0]
    def hard(self, r):
        return self.source.rlimit(r[1])[1]
    def set_soft(self, r, v):
        self.source.rlimit(r[1], (v, self.hard(r)))
    def set_hard(self, r, v):
        self.source.rlimit(r[1], (self.soft(r), v))

    def reload(self):
        self.rows = []
        for r in dir(psutil):
            if r.startswith('RLIMIT'):
                self.addRow((r[7:], getattr(psutil, r)))


UsefulProcessesSheet.addCommand('^K', '', 'os.kill(cursorRow.pid, int(chooseOne(range(16))))', 'kill(2) send a signal to a process')

UsefulProcessesSheet.addCommand('R', 'vd.push(RlimitsSheet(cursorRow.name() + "_rlimits", cursorRow))', 'push rlimits for this process')

vd.cpuStats = CPUStatsSheet('cpustats')
vd.memStats = MemStatsSheet('mem_stats')
vd.processes = ProcessesSheet('processes')

globalCommand('^[c', 'open-cpu', 'vd.push(vd.cpuStats)', 'CPU stats')
globalCommand('^[m', 'open-memory', 'vd.push(vd.memStats)', 'Memory stats')
globalCommand('^[p', 'open-processes', 'vd.push(vd.processes)', 'Process stats')

def main_vtop():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('inputs', nargs='*', help='ping destination hosts')
    args = vd.parseArgs(parser)

    domotd()

    run(vd.processes)

ProcessesSheet.addCommand('^K', 'kill-process', 'os.kill(cursorRow.pid, int(chooseOne(range(16))))', 'kill(2) send a signal to a process')

main_vtop()
